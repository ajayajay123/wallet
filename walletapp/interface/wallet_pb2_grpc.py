# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import wallet_pb2 as wallet__pb2


class WalletStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.add_user = channel.unary_unary(
            '/Wallet/add_user',
            request_serializer=wallet__pb2.WalletData.SerializeToString,
            response_deserializer=wallet__pb2.WalletData.FromString,
        )
        self.setup_contract = channel.unary_unary(
            '/Wallet/setup_contract',
            request_serializer=wallet__pb2.WalletData.SerializeToString,
            response_deserializer=wallet__pb2.WalletData.FromString,
        )
        self.contract_execute = channel.unary_unary(
            '/Wallet/contract_execute',
            request_serializer=wallet__pb2.WalletData.SerializeToString,
            response_deserializer=wallet__pb2.WalletData.FromString,
        )
        self.remove_contract = channel.unary_unary(
            '/Wallet/remove_contract',
            request_serializer=wallet__pb2.WalletData.SerializeToString,
            response_deserializer=wallet__pb2.WalletData.FromString,
        )
        self.callback_of_complete_transaction = channel.unary_unary(
            '/Wallet/callback_of_complete_transaction',
            request_serializer=wallet__pb2.WalletData.SerializeToString,
            response_deserializer=wallet__pb2.WalletData.FromString,
        )


class WalletServicer(object):
    """Missing associated documentation comment in .proto file."""

    def add_user(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def setup_contract(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def contract_execute(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def remove_contract(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def callback_of_complete_transaction(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_WalletServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'add_user': grpc.unary_unary_rpc_method_handler(
            servicer.add_user,
            request_deserializer=wallet__pb2.WalletData.FromString,
            response_serializer=wallet__pb2.WalletData.SerializeToString,
        ),
        'setup_contract': grpc.unary_unary_rpc_method_handler(
            servicer.setup_contract,
            request_deserializer=wallet__pb2.WalletData.FromString,
            response_serializer=wallet__pb2.WalletData.SerializeToString,
        ),
        'contract_execute': grpc.unary_unary_rpc_method_handler(
            servicer.contract_execute,
            request_deserializer=wallet__pb2.WalletData.FromString,
            response_serializer=wallet__pb2.WalletData.SerializeToString,
        ),
        'remove_contract': grpc.unary_unary_rpc_method_handler(
            servicer.remove_contract,
            request_deserializer=wallet__pb2.WalletData.FromString,
            response_serializer=wallet__pb2.WalletData.SerializeToString,
        ),
        'callback_of_complete_transaction': grpc.unary_unary_rpc_method_handler(
            servicer.callback_of_complete_transaction,
            request_deserializer=wallet__pb2.WalletData.FromString,
            response_serializer=wallet__pb2.WalletData.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'Wallet', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class Wallet(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def add_user(request,
                 target,
                 options=(),
                 channel_credentials=None,
                 call_credentials=None,
                 insecure=False,
                 compression=None,
                 wait_for_ready=None,
                 timeout=None,
                 metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Wallet/add_user',
                                             wallet__pb2.WalletData.SerializeToString,
                                             wallet__pb2.WalletData.FromString,
                                             options, channel_credentials,
                                             insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def setup_contract(request,
                       target,
                       options=(),
                       channel_credentials=None,
                       call_credentials=None,
                       insecure=False,
                       compression=None,
                       wait_for_ready=None,
                       timeout=None,
                       metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Wallet/setup_contract',
                                             wallet__pb2.WalletData.SerializeToString,
                                             wallet__pb2.WalletData.FromString,
                                             options, channel_credentials,
                                             insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def contract_execute(request,
                         target,
                         options=(),
                         channel_credentials=None,
                         call_credentials=None,
                         insecure=False,
                         compression=None,
                         wait_for_ready=None,
                         timeout=None,
                         metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Wallet/contract_execute',
                                             wallet__pb2.WalletData.SerializeToString,
                                             wallet__pb2.WalletData.FromString,
                                             options, channel_credentials,
                                             insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def remove_contract(request,
                        target,
                        options=(),
                        channel_credentials=None,
                        call_credentials=None,
                        insecure=False,
                        compression=None,
                        wait_for_ready=None,
                        timeout=None,
                        metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Wallet/remove_contract',
                                             wallet__pb2.WalletData.SerializeToString,
                                             wallet__pb2.WalletData.FromString,
                                             options, channel_credentials,
                                             insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def callback_of_complete_transaction(request,
                                         target,
                                         options=(),
                                         channel_credentials=None,
                                         call_credentials=None,
                                         insecure=False,
                                         compression=None,
                                         wait_for_ready=None,
                                         timeout=None,
                                         metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Wallet/callback_of_complete_transaction',
                                             wallet__pb2.WalletData.SerializeToString,
                                             wallet__pb2.WalletData.FromString,
                                             options, channel_credentials,
                                             insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
